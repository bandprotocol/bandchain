package proof

// TODO: Revive this! It's commented because we upgrade to Cosmos 0.38.*.
// Proof structure will need to change now that we have more modules + the header structure changes.

import (
	"encoding/hex"

	"github.com/tendermint/tendermint/crypto/tmhash"
)

func hexToBytes(hexstr string) []byte {
	b, err := hex.DecodeString(hexstr)
	if err != nil {
		panic(err)
	}
	return b
}

func leafHash(item []byte) []byte {
	// leaf prefix is 0
	return tmhash.Sum(append([]byte{0}, item...))
}

func branchHash(left, right []byte) []byte {
	// branch prefix is 1
	return tmhash.Sum(append([]byte{1}, append(left, right...)...))
}

// func TestEncodeRelay(t *testing.T) {
// 	block := BlockRelayProof{
// 		OracleIAVLStateHash:    hexToBytes("8B1809D0516C7390C44A5EC4257A851875178D2944D12F2E26813918B8EEFC42"),
// 		OtherStoresMerkleHash:  hexToBytes("212B660DF6523ADEB581D3E25C9371E7622B58F2819B7D0B58D0258FAAAB4220"),
// 		SupplyStoresMerkleHash: hexToBytes("0FBBCE15B85C0DF1FD4972717663667C48A68A68210D8191970F5F74A861F39B"),
// 		BlockHeaderMerkleParts: BlockHeaderMerkleParts{
// 			hexToBytes("32FA694879095840619F5E49380612BD296FF7E950EAFB66FF654D99CA70869E"),
// 			hexToBytes("E3FD259FA71EE92C0AB41499DC6B370D052EDB883916E58890FF133D370BEC7C"),
// 			hexToBytes("DCF196962AFD713B39D460C4232985113616B2BF13A79D2D75B94FF0FC3DCBDE"),
// 			hexToBytes("DEF482CDA986470C27374601EC716E9853DE47D72828AE0131CF8EF98E2972C5"),
// 			hexToBytes("6E340B9CFFB37A989CA544E6BB780A2C78901D3FB33738768511A30617AFA01D"),
// 			hexToBytes("0EFE3E12F46363C7779140D4CE659925DB52F19053E114D7CC4EFD666B37F79F"),
// 		},
// 		SignedDataPrefix: hexToBytes("6D080211AC2600000000000022480A20"),
// 		Signatures: []TMSignature{
// 			TMSignature{
// 				R:                hexToBytes("7DD21F94744F08AB53B347637F5F6950A4A20203B3A9E959093D85DBAAB780CC"),
// 				S:                hexToBytes("49A344BFEA761DF202A6FBCC47F21CDDF8D7D3E1C14D41D3E3216B619B6AD4D4"),
// 				V:                28,
// 				SignedDataSuffix: hexToBytes("12240A20DF61A033B6F5FC338F3E15FA957976733AD813D4EA50C2214E26258AD755D82310012A0B08BBBDBAF20510F0C1AA78320962616E64636861696E"),
// 			},
// 			TMSignature{
// 				R:                hexToBytes("ABF029B60F2A3C889A13DF8B6F97B93EC19BA93D2B2FAD78BCB152B99951221C"),
// 				S:                hexToBytes("5012CF15AF0D99326B43216E68C98F4FD942ED800772C8F878A9EB8D4AAA684A"),
// 				V:                27,
// 				SignedDataSuffix: hexToBytes("12240A20DF61A033B6F5FC338F3E15FA957976733AD813D4EA50C2214E26258AD755D82310012A0B08BBBDBAF20510E0A0B478320962616E64636861696E"),
// 			},
// 			TMSignature{
// 				R:                hexToBytes("7BAC12F2E0003F4778DE3431169031996EC38A1D97C8A681BF5AC3D8A087D974"),
// 				S:                hexToBytes("1C3661B83BC49D1192631725DB620D6576ED74F79BC376DE4B68BC1C63FC3C00"),
// 				V:                27,
// 				SignedDataSuffix: hexToBytes("12240A20DF61A033B6F5FC338F3E15FA957976733AD813D4EA50C2214E26258AD755D82310012A0B08BBBDBAF20510DC95D67B320962616E64636861696E"),
// 			},
// 		},
// 	}
// 	result, err := block.encodeToEthData(9900)
// 	require.Nil(t, err)
// 	expect := hexToBytes("00000000000000000000000000000000000000000000000000000000000026ac8b1809d0516c7390c44a5ec4257a851875178d2944d12f2e26813918b8eefc42212b660df6523adeb581d3e25c9371e7622b58f2819b7d0b58d0258faaab42200fbbce15b85c0df1fd4972717663667c48a68a68210d8191970f5f74a861f39b32fa694879095840619f5e49380612bd296ff7e950eafb66ff654d99ca70869ee3fd259fa71ee92c0ab41499dc6b370d052edb883916e58890ff133d370bec7cdcf196962afd713b39d460c4232985113616b2bf13a79d2d75b94ff0fc3dcbdedef482cda986470c27374601ec716e9853de47d72828ae0131cf8ef98e2972c56e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d0efe3e12f46363c7779140d4ce659925db52f19053e114d7cc4efd666b37f79f000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000000106d080211ac2600000000000022480a200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000002207dd21f94744f08ab53b347637f5f6950a4a20203b3a9e959093d85dbaab780cc49a344bfea761df202a6fbcc47f21cddf8d7d3e1c14d41d3e3216b619b6ad4d4000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000003e12240a20df61a033b6f5fc338f3e15fa957976733ad813d4ea50c2214e26258ad755d82310012a0b08bbbdbaf20510f0c1aa78320962616e64636861696e0000abf029b60f2a3c889a13df8b6f97b93ec19ba93d2b2fad78bcb152b99951221c5012cf15af0d99326b43216e68c98f4fd942ed800772c8f878a9eb8d4aaa684a000000000000000000000000000000000000000000000000000000000000001b0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000003e12240a20df61a033b6f5fc338f3e15fa957976733ad813d4ea50c2214e26258ad755d82310012a0b08bbbdbaf20510e0a0b478320962616e64636861696e00007bac12f2e0003f4778de3431169031996ec38a1d97c8a681bf5ac3d8a087d9741c3661b83bc49d1192631725db620d6576ed74f79bc376de4b68bc1c63fc3c00000000000000000000000000000000000000000000000000000000000000001b0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000003e12240a20df61a033b6f5fc338f3e15fa957976733ad813d4ea50c2214e26258ad755d82310012a0b08bbbdbaf20510dc95d67b320962616e64636861696e0000")
// 	require.Equal(t, expect, result)
// }

// func TestEncodeVerify(t *testing.T) {
// 	data := OracleDataProof{
// 		Version:        uint64(509),
// 		RequestID:      oracle.RequestID(1),
// 		OracleScriptID: oracle.OracleScriptID(1),
// 		Calldata:       hexToBytes("63616C6C5F646174615F6D756D75"),
// 		Data:           hexToBytes("746573745F726573756C745F6D756D75"),
// 		MerklePaths: []IAVLMerklePath{
// 			IAVLMerklePath{
// 				IsDataOnRight:  true,
// 				SubtreeHeight:  1,
// 				SubtreeSize:    2,
// 				SubtreeVersion: 509,
// 				SiblingHash:    hexToBytes("B10A692F3521517375A9651C9AF5B4FDC7C2CBF7A45315571A714967CA29D9D0"),
// 			},
// 			IAVLMerklePath{
// 				IsDataOnRight:  true,
// 				SubtreeHeight:  2,
// 				SubtreeSize:    3,
// 				SubtreeVersion: 9899,
// 				SiblingHash:    hexToBytes("3746BFCA65A331CADE3FCCABA30A294E72A73A65289F348A5F61628EDD5AF625"),
// 			},
// 		},
// 	}

// 	result, err := data.encodeToEthData(9900)
// 	require.Nil(t, err)
// 	expect := hexToBytes("00000000000000000000000000000000000000000000000000000000000026ac00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001fd00000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000010746573745f726573756c745f6d756d7500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e63616c6c5f646174615f6d756d75000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000001fdb10a692f3521517375a9651c9af5b4fdc7c2cbf7a45315571a714967ca29d9d000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000026ab3746bfca65a331cade3fccaba30a294e72a73a65289f348a5f61628edd5af625")
// 	require.Equal(t, expect, result)
// }
