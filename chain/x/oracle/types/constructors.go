// Code generated by protoconstructorgen.py. DO NOT EDIT.
package types

import github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"

func NewMsgRequestData(
	OracleScriptID OracleScriptID,
	Calldata []byte,
	AskCount int64,
	MinCount int64,
	ClientID string,
	Sender github_com_cosmos_cosmos_sdk_types.AccAddress,
) MsgRequestData {
	return MsgRequestData{
		OracleScriptID: OracleScriptID,
		Calldata:       Calldata,
		AskCount:       AskCount,
		MinCount:       MinCount,
		ClientID:       ClientID,
		Sender:         Sender,
	}
}

func NewMsgReportData(
	RequestID RequestID,
	DataSet []RawReport,
	Validator github_com_cosmos_cosmos_sdk_types.ValAddress,
	Reporter github_com_cosmos_cosmos_sdk_types.AccAddress,
) MsgReportData {
	return MsgReportData{
		RequestID: RequestID,
		DataSet:   DataSet,
		Validator: Validator,
		Reporter:  Reporter,
	}
}

func NewMsgCreateDataSource(
	Owner github_com_cosmos_cosmos_sdk_types.AccAddress,
	Name string,
	Description string,
	Executable []byte,
	Sender github_com_cosmos_cosmos_sdk_types.AccAddress,
) MsgCreateDataSource {
	return MsgCreateDataSource{
		Owner:       Owner,
		Name:        Name,
		Description: Description,
		Executable:  Executable,
		Sender:      Sender,
	}
}

func NewMsgEditDataSource(
	DataSourceID DataSourceID,
	Owner github_com_cosmos_cosmos_sdk_types.AccAddress,
	Name string,
	Description string,
	Executable []byte,
	Sender github_com_cosmos_cosmos_sdk_types.AccAddress,
) MsgEditDataSource {
	return MsgEditDataSource{
		DataSourceID: DataSourceID,
		Owner:        Owner,
		Name:         Name,
		Description:  Description,
		Executable:   Executable,
		Sender:       Sender,
	}
}

func NewMsgCreateOracleScript(
	Owner github_com_cosmos_cosmos_sdk_types.AccAddress,
	Name string,
	Description string,
	Code []byte,
	Schema string,
	SourceCodeURL string,
	Sender github_com_cosmos_cosmos_sdk_types.AccAddress,
) MsgCreateOracleScript {
	return MsgCreateOracleScript{
		Owner:         Owner,
		Name:          Name,
		Description:   Description,
		Code:          Code,
		Schema:        Schema,
		SourceCodeURL: SourceCodeURL,
		Sender:        Sender,
	}
}

func NewMsgEditOracleScript(
	OracleScriptID OracleScriptID,
	Owner github_com_cosmos_cosmos_sdk_types.AccAddress,
	Name string,
	Description string,
	Code []byte,
	Schema string,
	SourceCodeURL string,
	Sender github_com_cosmos_cosmos_sdk_types.AccAddress,
) MsgEditOracleScript {
	return MsgEditOracleScript{
		OracleScriptID: OracleScriptID,
		Owner:          Owner,
		Name:           Name,
		Description:    Description,
		Code:           Code,
		Schema:         Schema,
		SourceCodeURL:  SourceCodeURL,
		Sender:         Sender,
	}
}

func NewMsgAddOracleAddress(
	Validator github_com_cosmos_cosmos_sdk_types.ValAddress,
	Reporter github_com_cosmos_cosmos_sdk_types.AccAddress,
) MsgAddOracleAddress {
	return MsgAddOracleAddress{
		Validator: Validator,
		Reporter:  Reporter,
	}
}

func NewMsgRemoveOracleAddress(
	Validator github_com_cosmos_cosmos_sdk_types.ValAddress,
	Reporter github_com_cosmos_cosmos_sdk_types.AccAddress,
) MsgRemoveOracleAddress {
	return MsgRemoveOracleAddress{
		Validator: Validator,
		Reporter:  Reporter,
	}
}

func NewDataSource(
	Owner github_com_cosmos_cosmos_sdk_types.AccAddress,
	Name string,
	Description string,
	Executable []byte,
) DataSource {
	return DataSource{
		Owner:       Owner,
		Name:        Name,
		Description: Description,
		Executable:  Executable,
	}
}

func NewOracleScript(
	Owner github_com_cosmos_cosmos_sdk_types.AccAddress,
	Name string,
	Description string,
	Code []byte,
	Schema string,
	SourceCodeURL string,
) OracleScript {
	return OracleScript{
		Owner:         Owner,
		Name:          Name,
		Description:   Description,
		Code:          Code,
		Schema:        Schema,
		SourceCodeURL: SourceCodeURL,
	}
}

func NewRawRequest(
	ExternalID ExternalID,
	DataSourceID DataSourceID,
	Calldata []byte,
) RawRequest {
	return RawRequest{
		ExternalID:   ExternalID,
		DataSourceID: DataSourceID,
		Calldata:     Calldata,
	}
}

func NewRawReport(
	ExternalID ExternalID,
	ExitCode uint32,
	Data []byte,
) RawReport {
	return RawReport{
		ExternalID: ExternalID,
		ExitCode:   ExitCode,
		Data:       Data,
	}
}

func NewOracleRequestPacketData(
	ClientID string,
	OracleScriptID OracleScriptID,
	Calldata string,
	AskCount int64,
	MinCount int64,
) OracleRequestPacketData {
	return OracleRequestPacketData{
		ClientID:       ClientID,
		OracleScriptID: OracleScriptID,
		Calldata:       Calldata,
		AskCount:       AskCount,
		MinCount:       MinCount,
	}
}

func NewOracleResponsePacketData(
	ClientID string,
	RequestID RequestID,
	AnsCount int64,
	RequestTime int64,
	ResolveTime int64,
	ResolveStatus ResolveStatus,
	Result string,
) OracleResponsePacketData {
	return OracleResponsePacketData{
		ClientID:      ClientID,
		RequestID:     RequestID,
		AnsCount:      AnsCount,
		RequestTime:   RequestTime,
		ResolveTime:   ResolveTime,
		ResolveStatus: ResolveStatus,
		Result:        Result,
	}
}

func NewRequest(
	OracleScriptID OracleScriptID,
	Calldata []byte,
	RequestedValidators []github_com_cosmos_cosmos_sdk_types.ValAddress,
	MinCount int64,
	RequestHeight int64,
	RequestTime int64,
	ClientID string,
	IBC *RequestIBC,
) Request {
	return Request{
		OracleScriptID:      OracleScriptID,
		Calldata:            Calldata,
		RequestedValidators: RequestedValidators,
		MinCount:            MinCount,
		RequestHeight:       RequestHeight,
		RequestTime:         RequestTime,
		ClientID:            ClientID,
		IBC:                 IBC,
	}
}

func NewRequestIBC(
	SourcePort string,
	SourceChannel string,
) RequestIBC {
	return RequestIBC{
		SourcePort:    SourcePort,
		SourceChannel: SourceChannel,
	}
}

func NewReport(
	Validator github_com_cosmos_cosmos_sdk_types.ValAddress,
	RawReports []RawReport,
) Report {
	return Report{
		Validator:  Validator,
		RawReports: RawReports,
	}
}

func NewParams(
	MaxDataSourceExecutableSize uint64,
	MaxOracleScriptCodeSize uint64,
	MaxCalldataSize uint64,
	MaxRawRequestCount uint64,
	MaxRawDataReportSize uint64,
	MaxResultSize uint64,
	MaxNameLength uint64,
	MaxDescriptionLength uint64,
	GasPerRawDataRequestPerValidator uint64,
	ExpirationBlockCount uint64,
	ExecuteGas uint64,
	PrepareGas uint64,
) Params {
	return Params{
		MaxDataSourceExecutableSize:      MaxDataSourceExecutableSize,
		MaxOracleScriptCodeSize:          MaxOracleScriptCodeSize,
		MaxCalldataSize:                  MaxCalldataSize,
		MaxRawRequestCount:               MaxRawRequestCount,
		MaxRawDataReportSize:             MaxRawDataReportSize,
		MaxResultSize:                    MaxResultSize,
		MaxNameLength:                    MaxNameLength,
		MaxDescriptionLength:             MaxDescriptionLength,
		GasPerRawDataRequestPerValidator: GasPerRawDataRequestPerValidator,
		ExpirationBlockCount:             ExpirationBlockCount,
		ExecuteGas:                       ExecuteGas,
		PrepareGas:                       PrepareGas,
	}
}
