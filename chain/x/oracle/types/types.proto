syntax = "proto3";
package bandchain.chain.x.oracle.v1;

import "third_party/proto/gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
option go_package = "github.com/bandprotocol/bandchain/chain/x/oracle/types";

// MsgRequestData is a message for sending a data oracle request.
message MsgRequestData {
  option (gogoproto.equal) = true;
  // OracleScriptID is the identifier of the oracle script to call.
  int64 oracle_script_id = 1 [(gogoproto.customname) = "OracleScriptID", (gogoproto.casttype) = "OracleScriptID"];
  // Calldata is the OBI encoded call parameters to the oracle script.
  bytes calldata = 2;
  // AskCount is the number of validators to perform the oracle task.
  uint64 ask_count = 3;
  // MinCount is the minimum number of validators sufficient to resolve the tasks.
  uint64 min_count = 4;
  // ClientID is the client-provided unique identifier to tracking the request.
  string client_id = 5 [(gogoproto.customname) = "ClientID"];
  // Sender is the sender of this message.
  bytes sender = 6 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

// MsgReportData is a message for reporting to a data request by a validator.
message MsgReportData {
  option (gogoproto.equal) = true;
  // RequestID is the identifier of the request to report to.
  int64 request_id = 1 [(gogoproto.customname) = "RequestID", (gogoproto.casttype) = "RequestID"];
  // RawReports is the list of report information for each of the request's external ID.
  repeated RawReport raw_reports = 2 [(gogoproto.nullable) = false];
  // Validator is the address of the validator that owns this report.
  bytes validator = 3 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.ValAddress"];
  // Reporter is the message signer who submits this report transaction for the validator.
  bytes reporter = 4 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

// MsgCreateDataSource is a message for creating a new data source.
message MsgCreateDataSource {
  option (gogoproto.equal) = true;
  // Owner is the address who is allowed to make further changes to the data source.
  bytes owner = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
  // Name is the name of this data source (optional).
  string name = 2;
  // Description is the description of this data source (optional).
  string description = 3;
  // Executable is the executable script or binary to be run by validators upon execution.
  bytes executable = 4;
  // Sender is the signer of this message.
  bytes sender = 5 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

// MsgEditDataSource is a message for editing an existing data source.
message MsgEditDataSource {
  option (gogoproto.equal) = true;
  // DataSourceID is the unique identifier of the data source to be edited.
  int64 data_source_id = 1 [(gogoproto.customname) = "DataSourceID", (gogoproto.casttype) = "DataSourceID"];
  // Owner is the new address who is allowed to make further changes to the data source.
  bytes owner = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
  // Name is the name of this data source (optional).
  string name = 3;
  // Description is the description of this data source (optional).
  string description = 4;
  // Executable is the executable script or binary to be run by validators upon execution.
  bytes executable = 5;
  // Sender is the signer of this message. Must be the current data source's owner.
  bytes sender = 6 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

// MsgCreateOracleScript is a message for creating an oracle script.
message MsgCreateOracleScript {
  option (gogoproto.equal) = true;
  // Owner is the address who is allowed to make further changes to the oracle script.
  bytes owner = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
  // Name is the name of this oracle script (optional).
  string name = 2;
  // Description is the description of this oracle script (optional).
  string description = 3;
  // Code is the oracle WebAssembly binary code. Can be raw of gzip compressed.
  bytes code = 4;
  // Schema is the OBI schema of this oracle script (optional).
  string schema = 5;
  // SourceCodeURL is the absolute URI to the script's source code (optional).
  string source_code_url = 6 [(gogoproto.customname) = "SourceCodeURL"];
  // Sender is the signer of this message.
  bytes sender = 7 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

// MsgEditOracleScript is a message for editing an existing oracle script.
message MsgEditOracleScript {
  option (gogoproto.equal) = true;
  // OracleScriptID is the unique identifier of the oracle script to be edited.
  int64 oracle_script_id = 1 [(gogoproto.customname) = "OracleScriptID", (gogoproto.casttype) = "OracleScriptID"];
  // Owner is new the address who is allowed to make further changes to the oracle script.
  bytes owner = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
  // Name is the name of this oracle script (optional).
  string name = 3;
  // Description is the description of this oracle script (optional).
  string description = 4;
  // Code is the oracle WebAssembly binary code. Can be raw of gzip compressed.
  bytes code = 5;
  // Schema is the OBI schema of this oracle script (optional).
  string schema = 6;
  // SourceCodeURL is the absolute URI to the script's source code (optional).
  string source_code_url = 7 [(gogoproto.customname) = "SourceCodeURL"];
  // Sender is the signer of this message. Must be the current oracle script's owner.
  bytes sender = 8 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

// MsgEditOracleScript is a message for activating a validator to become an oracle provider.
message MsgActivate {
  option (gogoproto.equal) = true;
  // Validator is the signer of this message and the validator to be activated.
  bytes validator = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.ValAddress"];
}

// MsgAddReporter is a message for adding a new reporter for a validator.
message MsgAddReporter {
  option (gogoproto.equal) = true;
  // Validator is the validator that wishes to add a new reporter. This is the signer.
  bytes validator = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.ValAddress"];
  // Reporter is the address to be added as a reporter to the validator.
  bytes reporter = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

// MsgAddReporter is a message for removing an existing reporter from a validator.
message MsgRemoveReporter {
  option (gogoproto.equal) = true;
  // Validator is the validator that wishes to remove an existing reporter. This is the signer.
  bytes validator = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.ValAddress"];
  // Reporter is the address to be removed from being the validators' reporter.
  bytes reporter = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

// DataSource is the data structure for storing data sources in the storage.
message DataSource {
  option (gogoproto.equal) = true;
  bytes owner = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
  string name = 2;
  string description = 3;
  string filename = 4;
}

// OracleScript is the data structure for storing oracle scripts in the storage.
message OracleScript {
  option (gogoproto.equal) = true;
  bytes owner = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
  string name = 2;
  string description = 3;
  string filename = 4;
  string schema = 5;
  string source_code_url = 6 [(gogoproto.customname) = "SourceCodeURL"];
}

// RawRequest is the data structure for storing raw requests in the storage.
message RawRequest {
  option (gogoproto.equal) = true;
  int64 external_id = 1 [(gogoproto.customname) = "ExternalID", (gogoproto.casttype) = "ExternalID"];
  int64 data_source_id = 2 [(gogoproto.customname) = "DataSourceID", (gogoproto.casttype) = "DataSourceID"];
  bytes calldata = 3;
}

// RawRequest is the data structure for storing raw reporter in the storage.
message RawReport {
  option (gogoproto.equal) = true;
  int64 external_id = 1 [(gogoproto.customname) = "ExternalID", (gogoproto.casttype) = "ExternalID"];
  uint32 exit_code = 2;
  bytes data = 3;
}

// Request is the data structure for storing requests in the storage.
message Request {
  option (gogoproto.equal) = true;
  int64 oracle_script_id = 1 [(gogoproto.customname) = "OracleScriptID", (gogoproto.casttype) = "OracleScriptID"];
  bytes calldata = 2;
  repeated bytes requested_validators = 3 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.ValAddress"];
  uint64 min_count = 4;
  int64 request_height = 5;
  google.protobuf.Timestamp request_time = 6 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  string client_id = 7 [(gogoproto.customname) = "ClientID"];
  repeated RawRequest raw_requests = 8 [(gogoproto.nullable) = false];
}

// Report is the data structure for storing reports in the storage.
message Report {
  option (gogoproto.equal) = true;
  bytes validator = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.ValAddress"];
  bool in_before_resolve = 2;
  repeated RawReport raw_reports = 3 [(gogoproto.nullable) = false];
}

// ResolveStatus encodes the status of an oracle request.
enum ResolveStatus {
  // Open - the request is not yet resolved.
  Open = 0;
  // Success - the request has been resolved successfully with no errors.
  Success = 1;
  // Failure - an error occured during the request's resolve call.
  Failure = 2;
  // Expired - the request does not get enough reports from validator within the timeframe.
  Expired = 3;
}

// OracleRequestPacketData encodes an oracle request sent from other blockchains to BandChain.
message OracleRequestPacketData {
  option (gogoproto.equal) = true;
  // ClientID is the unique identifier of this oracle request, as specified by the client.
  // This same unique ID will be sent back to the requester with the oracle response.
  string client_id = 1 [(gogoproto.customname) = "ClientID"];
  // OracleScriptID is the unique identifier of the oracle script to be executed.
  int64 oracle_script_id = 2 [(gogoproto.customname) = "OracleScriptID", (gogoproto.casttype) = "OracleScriptID"];
  // Calldata is the calldata bytes available for oracle executor to read.
  bytes calldata = 3;
  // AskCount is the number of validators that are requested to respond to this oracle request.
  // Higher value means more security, at a higher gas cost.
  uint64 ask_count = 4;
  // MinCount is the minimum number of validators necessary for the request to proceed to the
  // execution phase. Higher value means more security, at the cost of liveness.
  uint64 min_count = 5;
}

// OracleResponsePacketData encodes an oracle response from BandChain to the requester.
message OracleResponsePacketData {
  option (gogoproto.equal) = true;
  // ClientID is the unique identifier matched with that of the oracle request packet.
  string client_id = 1 [(gogoproto.customname) = "ClientID"];
  // RequestID is BandChain's unique identifier for this oracle request.
  int64 request_id = 2 [(gogoproto.customname) = "RequestID", (gogoproto.casttype) = "RequestID"];
  // AnsCount is the number of validators among to the asked validators that actually responded
  // to this oracle request prior to this oracle request being resolved.
  uint64 ans_count = 3;
  // RequestTime is the UNIX epoch time at which the request was sent to BandChain.
  int64 request_time = 4;
  // ResolveTime is the UNIX epoch time at which the request was resolved to the final result.
  int64 resolve_time = 5;
  // ResolveStatus is the status of this oracle request, which can be OK, FAILURE, or EXPIRED.
  ResolveStatus resolve_status = 6;
  // Result is the final aggregated value only available if status if OK.
  bytes result = 7;
}

// ValidatorStatus maintains whether a validator is an active oracle provider.
message ValidatorStatus {
  option (gogoproto.equal) = true;
  bool is_active = 1;
  google.protobuf.Timestamp since = 2 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

// Params is the data structure that keeps the parameters of the oracle module.
message Params {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = false;
  // MaxRawRequestCount is the maximum number of data source raw requests a request can make.
  uint64 max_raw_request_count = 1;
  // MaxAskCount is the maximum number of validators a request can target.
  uint64 max_ask_count = 2;
  // ExpirationBlockCount is the number of blocks a request stays valid before it gets
  // expired due to insufficient reports.
  uint64 expiration_block_count = 3;
  // BaseRequestGas is the base amount of Cosmos-SDK gas charged for an oracle request.
  uint64 base_request_gas = 4;
  // PerValidatorRequestGas is the amount of Cosmos-SDK gas charged per requested validator.
  uint64 per_validator_request_gas = 5;
  // SamplingTryCount the number of validator sampling tries to pick the highest voting power
  // subset of validators to perform an oracle task.
  uint64 sampling_try_count = 6;
  // OracleRewardPercentage is the percentage of block rewards allocated to active oracle validators.
  uint64 oracle_reward_percentage = 7;
  // InactivePenaltyDuration is the duration period where a validator cannot activate back
  // after missing an oracle report.
  uint64 inactive_penalty_duration = 8;
}
