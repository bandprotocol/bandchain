const { expectRevert } = require("openzeppelin-test-helpers");
const Bridge = artifacts.require("BridgeMock");
const ReceiverMock = artifacts.require("ReceiverMock");

require("chai").should();

contract("Bridge", ([_, owner, alice, bob]) => {
  context("Checking oracle state relay (4 validators)", () => {
    beforeEach(async () => {
      this.bridge = await Bridge.new(
        [
          ["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", 100],
          ["0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE", 100],
          ["0xaAA22E077492CbaD414098EBD98AA8dc1C7AE8D9", 100],
          ["0xB956589b6fC5523eeD0d9eEcfF06262Ce84ff260", 100],
        ],
        { from: owner },
      );
    });

    it("should accept correct state relay (validator power is more than 2/3)", async () => {
      await this.bridge.relayOracleState(
        "63407", // _blockHeight,
        [
          "0x2B14E5AB19A88F23B3F6C694659374DF21E21935A7C0B8565C4E7B43AAB3BB43", // accToMemCapStoresMerkleHash
          "0x06223635C7D081E76F30998DA7D601AB9AB8602C9AE7095E319C68F4CE2F5F73", // mintStoresMerkleHash
          "0xC744B497E2569517AA2F053E2A4E09C67427DC0FD8840048C607AF8F17D9100C", // oracleIAVLStateHash
          "0xAE658B0EA9B1C87323D0FA810ADBE9DB91BE0BAEA62D29F376488666ECA9BBEB", // paramsAndSlashingStoresMerkleHash
          "0xAA66B682A3FE96C372A095A43F2E73B33E89D835DB3BBF2496546328A7BD4961", // stakingAndUpgradeStoresMerkleHash
        ],
        [
          "0x32FA694879095840619F5E49380612BD296FF7E950EAFB66FF654D99CA70869E", // versionAndChainIdHash
          "0x9F667F22196CFEBD590E3B178148942EF40C5B693336BF20608D5F21AA679ABC", // timeHash
          "0xF665C04557D07EAACFC46F2E5B5D267C3B2C4EEAF395784F30CC84266816A89D", // lastBlockIDAndOther
          "0xE3BB39F3B621939B734AF396D7CF5CCFDEDD4A3D16F139FD481874BC6F6E52B4", // nextValidatorHashAndConsensusHash
          "0x6E340B9CFFB37A989CA544E6BB780A2C78901D3FB33738768511A30617AFA01D", // lastResultsHash
          "0xD991DA4D4E69473CC75A4B819F9E07D4956671A6F4A74DF4CC16596FCBE68137", // evidenceAndProposerHash
        ],
        "0x6E080211AFF700000000000022480A20", // _signedDataPrefix
        [
          [
            "0x62A900783D67A397A0CE36C82108122B97ACF88034CA917209937E2FF29EDB1C", // r
            "0x378595FF3223971F63946D133DE29189497BC800F26370AF44512DDC3B02A1F1", // s
            27, // v
            "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F50510D1E2E19103320962616E64636861696E", // signedDataSuffix
          ],
          [
            "0x97009E1695FBD0FA6708C08C31EF92D28FA1AC64C6E6346193DE375AD377DE44", // r
            "0x54DB42DFE62EC6B2C755DB707D7DF48EF49485EF8282C91054B728F052E452AC", // s
            28, // v
            "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F5051084A2F89103320962616E64636861696E", // signedDataSuffix
          ],
          [
            "0x950C0D5475AB4D2E7257811A4F304201D6CC52F7F5D06B8CDBB53922C4BCD140", // r
            "0x4C747F4985569E59401E450F12F37933AED9EB9FB2F20CF022DAC9D31B9AADDC", // s
            28, // v
            "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F505109685E29103320962616E64636861696E", // signedDataSuffix
          ],
        ],
      );
    });

    it("should revert if sum of validator powers is less than 2/3)", async () => {
      await expectRevert(
        this.bridge.relayOracleState(
          "63407", // _blockHeight,
          [
            "0x2B14E5AB19A88F23B3F6C694659374DF21E21935A7C0B8565C4E7B43AAB3BB43", // accToMemCapStoresMerkleHash
            "0x06223635C7D081E76F30998DA7D601AB9AB8602C9AE7095E319C68F4CE2F5F73", // mintStoresMerkleHash
            "0xC744B497E2569517AA2F053E2A4E09C67427DC0FD8840048C607AF8F17D9100C", // oracleIAVLStateHash
            "0xAE658B0EA9B1C87323D0FA810ADBE9DB91BE0BAEA62D29F376488666ECA9BBEB", // paramsAndSlashingStoresMerkleHash
            "0xAA66B682A3FE96C372A095A43F2E73B33E89D835DB3BBF2496546328A7BD4961", // stakingAndUpgradeStoresMerkleHash
          ],
          [
            "0x32FA694879095840619F5E49380612BD296FF7E950EAFB66FF654D99CA70869E", // versionAndChainIdHash
            "0x9F667F22196CFEBD590E3B178148942EF40C5B693336BF20608D5F21AA679ABC", // timeHash
            "0xF665C04557D07EAACFC46F2E5B5D267C3B2C4EEAF395784F30CC84266816A89D", // lastBlockIDAndOther
            "0xE3BB39F3B621939B734AF396D7CF5CCFDEDD4A3D16F139FD481874BC6F6E52B4", // nextValidatorHashAndConsensusHash
            "0x6E340B9CFFB37A989CA544E6BB780A2C78901D3FB33738768511A30617AFA01D", // lastResultsHash
            "0xD991DA4D4E69473CC75A4B819F9E07D4956671A6F4A74DF4CC16596FCBE68137", // evidenceAndProposerHash
          ],
          "0x6E080211AFF700000000000022480A20", // _signedDataPrefix
          [
            [
              "0x97009E1695FBD0FA6708C08C31EF92D28FA1AC64C6E6346193DE375AD377DE44", // r
              "0x54DB42DFE62EC6B2C755DB707D7DF48EF49485EF8282C91054B728F052E452AC", // s
              28, // v
              "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F5051084A2F89103320962616E64636861696E", // signedDataSuffix
            ],
            [
              "0x950C0D5475AB4D2E7257811A4F304201D6CC52F7F5D06B8CDBB53922C4BCD140", // r
              "0x4C747F4985569E59401E450F12F37933AED9EB9FB2F20CF022DAC9D31B9AADDC", // s
              28, // v
              "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F505109685E29103320962616E64636861696E", // signedDataSuffix
            ],
          ],
        ),
        "INSUFFICIENT_VALIDATOR_SIGNATURES",
      );
    });

    it("should not accept out-of-order signatures", async () => {
      await expectRevert(
        this.bridge.relayOracleState(
          "63407", // _blockHeight,
          [
            "0x2B14E5AB19A88F23B3F6C694659374DF21E21935A7C0B8565C4E7B43AAB3BB43", // accToMemCapStoresMerkleHash
            "0x06223635C7D081E76F30998DA7D601AB9AB8602C9AE7095E319C68F4CE2F5F73", // mintStoresMerkleHash
            "0xC744B497E2569517AA2F053E2A4E09C67427DC0FD8840048C607AF8F17D9100C", // oracleIAVLStateHash
            "0xAE658B0EA9B1C87323D0FA810ADBE9DB91BE0BAEA62D29F376488666ECA9BBEB", // paramsAndSlashingStoresMerkleHash
            "0xAA66B682A3FE96C372A095A43F2E73B33E89D835DB3BBF2496546328A7BD4961", // stakingAndUpgradeStoresMerkleHash
          ],
          [
            "0x32FA694879095840619F5E49380612BD296FF7E950EAFB66FF654D99CA70869E", // versionAndChainIdHash
            "0x9F667F22196CFEBD590E3B178148942EF40C5B693336BF20608D5F21AA679ABC", // timeHash
            "0xF665C04557D07EAACFC46F2E5B5D267C3B2C4EEAF395784F30CC84266816A89D", // lastBlockIDAndOther
            "0xE3BB39F3B621939B734AF396D7CF5CCFDEDD4A3D16F139FD481874BC6F6E52B4", // nextValidatorHashAndConsensusHash
            "0x6E340B9CFFB37A989CA544E6BB780A2C78901D3FB33738768511A30617AFA01D", // lastResultsHash
            "0xD991DA4D4E69473CC75A4B819F9E07D4956671A6F4A74DF4CC16596FCBE68137", // evidenceAndProposerHash
          ],
          "0x6E080211AFF700000000000022480A20", // _signedDataPrefix
          [
            [
              "0x950C0D5475AB4D2E7257811A4F304201D6CC52F7F5D06B8CDBB53922C4BCD140", // r
              "0x4C747F4985569E59401E450F12F37933AED9EB9FB2F20CF022DAC9D31B9AADDC", // s
              28, // v
              "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F505109685E29103320962616E64636861696E", // signedDataSuffix
            ],
            [
              "0x97009E1695FBD0FA6708C08C31EF92D28FA1AC64C6E6346193DE375AD377DE44", // r
              "0x54DB42DFE62EC6B2C755DB707D7DF48EF49485EF8282C91054B728F052E452AC", // s
              28, // v
              "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F5051084A2F89103320962616E64636861696E", // signedDataSuffix
            ],
            [
              "0x62A900783D67A397A0CE36C82108122B97ACF88034CA917209937E2FF29EDB1C", // r
              "0x378595FF3223971F63946D133DE29189497BC800F26370AF44512DDC3B02A1F1", // s
              27, // v
              "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F50510D1E2E19103320962616E64636861696E", // signedDataSuffix
            ],
          ],
        ),
        "INVALID_SIGNATURE_SIGNER_ORDER",
      );
    });

    it("should not accept invalid signature", async () => {
      await expectRevert(
        this.bridge.relayOracleState(
          "63407", // _blockHeight,
          [
            "0x2B14E5AB19A88F23B3F6C694659374DF21E21935A7C0B8565C4E7B43AAB3BB43", // accToMemCapStoresMerkleHash
            "0x06223635C7D081E76F30998DA7D601AB9AB8602C9AE7095E319C68F4CE2F5F73", // mintStoresMerkleHash
            "0xC744B497E2569517AA2F053E2A4E09C67427DC0FD8840048C607AF8F17D9100C", // oracleIAVLStateHash
            "0xAE658B0EA9B1C87323D0FA810ADBE9DB91BE0BAEA62D29F376488666ECA9BBEB", // paramsAndSlashingStoresMerkleHash
            "0xAA66B682A3FE96C372A095A43F2E73B33E89D835DB3BBF2496546328A7BD4961", // stakingAndUpgradeStoresMerkleHash
          ],
          [
            "0x32FA694879095840619F5E49380612BD296FF7E950EAFB66FF654D99CA70869E", // versionAndChainIdHash
            "0x9F667F22196CFEBD590E3B178148942EF40C5B693336BF20608D5F21AA679ABC", // timeHash
            "0xF665C04557D07EAACFC46F2E5B5D267C3B2C4EEAF395784F30CC84266816A89D", // lastBlockIDAndOther
            "0xE3BB39F3B621939B734AF396D7CF5CCFDEDD4A3D16F139FD481874BC6F6E52B4", // nextValidatorHashAndConsensusHash
            "0x6E340B9CFFB37A989CA544E6BB780A2C78901D3FB33738768511A30617AFA01D", // lastResultsHash
            "0xD991DA4D4E69473CC75A4B819F9E07D4956671A6F4A74DF4CC16596FCBE68137", // evidenceAndProposerHash
          ],
          "0x6E080211AFF700000000000022480A20", // _signedDataPrefix
          [
            [
              // This sigature is wrong
              "0x62A900783D67A397A0CE36C82108122B97ACF88034CA917209937E2FF29EDB1C", // r
              "0x378595FF3223971F63946D133DE29189497BC800F26370AF44512DDC3B02A1F1", // s
              28, // v
              "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F50510D1E2E19103320962616E64636861696E", // signedDataSuffix
            ],
            [
              "0x97009E1695FBD0FA6708C08C31EF92D28FA1AC64C6E6346193DE375AD377DE44", // r
              "0x54DB42DFE62EC6B2C755DB707D7DF48EF49485EF8282C91054B728F052E452AC", // s
              28, // v
              "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F5051084A2F89103320962616E64636861696E", // signedDataSuffix
            ],
            [
              "0x950C0D5475AB4D2E7257811A4F304201D6CC52F7F5D06B8CDBB53922C4BCD140", // r
              "0x4C747F4985569E59401E450F12F37933AED9EB9FB2F20CF022DAC9D31B9AADDC", // s
              28, // v
              "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F505109685E29103320962616E64636861696E", // signedDataSuffix
            ],
          ],
        ),
        "INSUFFICIENT_VALIDATOR_SIGNATURES",
      );
    });
  });

  context("Checking data verification", () => {
    beforeEach(async () => {
      this.bridge = await Bridge.new([]);
      await this.bridge.setOracleState(
        "178693", // _blockHeight
        "0xD2F9BA8D5831B68F80002A1B1B205A054D39D835150D032FA247A7B7FA998DAE", // _oracleIAVLStateHash
      );
    });

    it("should not accept unrelayed block", async () => {
      await expectRevert(
        this.bridge.verifyOracleData(
          "9999", // _blockHeight
          ["band test", 1, "030000004254436400000000000000", 4, 4], // _requestPacket
          ["band test", 1, 4, 1587734008, 1587734012, 1, "d8720b0000000000"], // _responsePacket
          "326", // _version
          [
            [
              true, // isDataOnRight
              "1", // subtreeHeight
              "2", // subtreeSize
              "54436", // subtreeVersion
              "0xA44982084B5CBAC2EC1DFD2DA6E5C315F88041EE5187AB09011DF15CB1E4AD4F", // siblingHash
            ],
            [
              true, // isDataOnRight
              "2", // subtreeHeight
              "4", // subtreeSize
              "71881", // subtreeVersion
              "0xA60467EDA72F9885397694062DCC799A1BBC62584B4DE87BE5812A3FC82FC867", // siblingHash
            ],
            [
              true, // isDataOnRight
              "3", // subtreeHeight
              "8", // subtreeSize
              "163458", // subtreeVersion
              "0x709E1C73511B24EFDD9B8D3CD717A5210BA20E2411A8529E8B642C54FB002DC4", // siblingHash
            ],
            [
              false, // isDataOnRight
              "4", // subtreeHeight
              "13", // subtreeSize
              "163458", // subtreeVersion
              "0x0BA6B3C6ACFAC5D66713F2B6963875489C4C8464E73DD2F953E188BEB3B9DD27", // siblingHash
            ],
            [
              true, // isDataOnRight
              "5", // subtreeHeight
              "18", // subtreeSize
              "178692", // subtreeVersion
              "0xB8AE896FF4B0D7E8290AB1008D860251DA91AFCDA5EAA0C44295A3217C884B8F", // siblingHash
            ],
          ],
        ),
        "NO_ORACLE_ROOT_STATE_DATA",
      );
    });

    it("should accept correct data verification", async () => {
      const ret = await this.bridge.verifyOracleData(
        "178693", // _blockHeight
        ["band test", 1, "030000004254436400000000000000", 4, 4], // _requestPacket
        ["band test", 1, 4, 1587734008, 1587734012, 1, "d8720b0000000000"], // _responsePacket
        "326", // _version
        [
          [
            true, // isDataOnRight
            "1", // subtreeHeight
            "2", // subtreeSize
            "54436", // subtreeVersion
            "0xA44982084B5CBAC2EC1DFD2DA6E5C315F88041EE5187AB09011DF15CB1E4AD4F", // siblingHash
          ],
          [
            true, // isDataOnRight
            "2", // subtreeHeight
            "4", // subtreeSize
            "71881", // subtreeVersion
            "0xA60467EDA72F9885397694062DCC799A1BBC62584B4DE87BE5812A3FC82FC867", // siblingHash
          ],
          [
            true, // isDataOnRight
            "3", // subtreeHeight
            "8", // subtreeSize
            "163458", // subtreeVersion
            "0x709E1C73511B24EFDD9B8D3CD717A5210BA20E2411A8529E8B642C54FB002DC4", // siblingHash
          ],
          [
            false, // isDataOnRight
            "4", // subtreeHeight
            "13", // subtreeSize
            "163458", // subtreeVersion
            "0x0BA6B3C6ACFAC5D66713F2B6963875489C4C8464E73DD2F953E188BEB3B9DD27", // siblingHash
          ],
          [
            true, // isDataOnRight
            "5", // subtreeHeight
            "18", // subtreeSize
            "178692", // subtreeVersion
            "0xB8AE896FF4B0D7E8290AB1008D860251DA91AFCDA5EAA0C44295A3217C884B8F", // siblingHash
          ],
        ],
      );
      // console.log(ret);
      ret[0]
        .toString()
        .should.eq(
          [
            "band test",
            "1",
            "030000004254436400000000000000",
            "4",
            "4",
          ].toString(),
        );
      ret[1]
        .toString()
        .should.eq(
          [
            "band test",
            1,
            4,
            1587734008,
            1587734012,
            1,
            "d8720b0000000000",
          ].toString(),
        );
    });

    it("should not accept invalid data verification", async () => {
      await expectRevert(
        this.bridge.verifyOracleData(
          "178693", // _blockHeight
          ["band test", 1, "030000004254436400000000000000", 4, 4], // _requestPacket
          ["band test", 1, 4, 1587734008, 1587734012, 1, "d7720b0000000000"], // wrong here
          "326", // _version
          [
            [
              true, // isDataOnRight
              "1", // subtreeHeight
              "2", // subtreeSize
              "54436", // subtreeVersion
              "0xA44982084B5CBAC2EC1DFD2DA6E5C315F88041EE5187AB09011DF15CB1E4AD4F", // siblingHash
            ],
            [
              true, // isDataOnRight
              "2", // subtreeHeight
              "4", // subtreeSize
              "71881", // subtreeVersion
              "0xA60467EDA72F9885397694062DCC799A1BBC62584B4DE87BE5812A3FC82FC867", // siblingHash
            ],
            [
              true, // isDataOnRight
              "3", // subtreeHeight
              "8", // subtreeSize
              "163458", // subtreeVersion
              "0x709E1C73511B24EFDD9B8D3CD717A5210BA20E2411A8529E8B642C54FB002DC4", // siblingHash
            ],
            [
              false, // isDataOnRight
              "4", // subtreeHeight
              "13", // subtreeSize
              "163458", // subtreeVersion
              "0x0BA6B3C6ACFAC5D66713F2B6963875489C4C8464E73DD2F953E188BEB3B9DD27", // siblingHash
            ],
            [
              true, // isDataOnRight
              "5", // subtreeHeight
              "18", // subtreeSize
              "178692", // subtreeVersion
              "0xB8AE896FF4B0D7E8290AB1008D860251DA91AFCDA5EAA0C44295A3217C884B8F", // siblingHash
            ],
          ],
        ),
        "INVALID_ORACLE_DATA_PROOF",
      );
    });

    it("should not accept incomplete proof", async () => {
      await expectRevert(
        this.bridge.verifyOracleData(
          "178693", // _blockHeight
          ["band test", 1, "030000004254436400000000000000", 4, 4], // _requestPacket
          ["band test", 1, 4, 1587734008, 1587734012, 1, "d8720b0000000000"], // _responsePacket
          "326", // _version
          [
            [
              true, // isDataOnRight
              "1", // subtreeHeight
              "2", // subtreeSize
              "54436", // subtreeVersion
              "0xA44982084B5CBAC2EC1DFD2DA6E5C315F88041EE5187AB09011DF15CB1E4AD4F", // siblingHash
            ],
            [
              true, // isDataOnRight
              "2", // subtreeHeight
              "4", // subtreeSize
              "71881", // subtreeVersion
              "0xA60467EDA72F9885397694062DCC799A1BBC62584B4DE87BE5812A3FC82FC867", // siblingHash
            ],
            [
              true, // isDataOnRight
              "3", // subtreeHeight
              "8", // subtreeSize
              "163458", // subtreeVersion
              "0x709E1C73511B24EFDD9B8D3CD717A5210BA20E2411A8529E8B642C54FB002DC4", // siblingHash
            ],
            [
              false, // isDataOnRight
              "4", // subtreeHeight
              "13", // subtreeSize
              "163458", // subtreeVersion
              "0x0BA6B3C6ACFAC5D66713F2B6963875489C4C8464E73DD2F953E188BEB3B9DD27", // siblingHash
            ],
          ],
        ),
        "INVALID_ORACLE_DATA_PROOF",
      );
    });
  });

  context("Relay and Verfiy data", () => {
    beforeEach(async () => {
      this.bridge = await Bridge.new([
        ["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", 100],
        ["0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE", 100],
        ["0xaAA22E077492CbaD414098EBD98AA8dc1C7AE8D9", 100],
        ["0xB956589b6fC5523eeD0d9eEcfF06262Ce84ff260", 100],
      ]);

      this.receiver = await ReceiverMock.new(this.bridge.address);
    });

    it("should accept valid relay and verify", async () => {
      await this.receiver.relayAndSafe(
        "0x
      );
      (await this.bridge.oracleStates(28))
        .toString()
        .should.eq(
          "0xd3707bec5bf767c06d08e6ac3bb09a249d3c7a12cc5534d1010e7f5712f00f38",
        );
      const req = await this.receiver.latestReq();
      req[0].toString().should.eq("band test");
      req[1].toString().should.eq("1");
      req[2].toString().should.eq("030000004254436400000000000000");
      req[3].toString().should.eq("4");
      req[4].toString().should.eq("4");
      const res = await this.receiver.latestRes();
      res[0].toString().should.eq("band test");
      res[1].toString().should.eq("1");
      res[2].toString().should.eq("4");
      res[3].toString().should.eq("1588168098");
      res[4].toString().should.eq("1588168104");
      res[5].toString().should.eq("1");
      res[6].toString().should.eq("5ca30c0000000000");
    });

    it("should accept valid relay and verify case 2", async () => {
      await this.receiver.relayAndSafe(
        "0x0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000058000000000000000000000000000000000000000000000000000000000000005200000000000000000000000000000000000000000000000000000000000000234E4AFD853694C8D904E7509C4E388D054D7FECA188CC2AA5F391CE2DE0C1DF753CE9D9F07EEB72C23C2F1DD0D8A19DE627686089917A7E5E8E22FF604DBD6E94BA198FCFAEBF1A6F499B330699B61C2557E8CCAEECDE3AEDD50192AAF87245E166D5B21D67B07D553861AD2BCA87CAE74491965249C30D248902F35AD90B9511C0AB8335CB1AD62163B743379D7292B32401F658713424DDADD38C3232F0224AF32FA694879095840619F5E49380612BD296FF7E950EAFB66FF654D99CA70869E49E1A01E4A705DAFCAD7013CB6A86D2D5505ED76D8F1665CFBBE279FFE000638FFD6B03A759B769DCAD0D02F9DE45A9CC546F947573C108414D456F1A7116059004209A161040AB1778E2F2C00EE482F205B28EFBA439FCB04EA283F619478D96E340B9CFFB37A989CA544E6BB780A2C78901D3FB33738768511A30617AFA01D0EFE3E12F46363C7779140D4CE659925DB52F19053E114D7CC4EFD666B37F79F00000000000000000000000000000000000000000000000000000000000001C0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000106E080211340200000000000022480A200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000002200E103975CA4DFB90BB0E5A5C091767945978E3EBAB28735A83E8DAD09CA5F6913CA0A40EA5112DCD8A2E4B4E7871F095CB243BD91619090D01494396EEB7A611000000000000000000000000000000000000000000000000000000000000001B0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000003F12240A2060ACC88D982DE2F0B60C7EC7B084B358EB33EFBD3B1F7CB78A07692DAAE5429F10012A0C08AC92A6F50510CCF58EB801320962616E64636861696E00CCC447AF4AB179B0CAF4F25BD5DDC5AC59E9F9D9F4BAA939CCB54CC8FBA643E674A2DA90D06869302F7790F36B7559C84A7702F35E7DE0096991756C42CC65B7000000000000000000000000000000000000000000000000000000000000001B0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000003F12240A2060ACC88D982DE2F0B60C7EC7B084B358EB33EFBD3B1F7CB78A07692DAAE5429F10012A0C08AC92A6F50510EFE7E1B801320962616E64636861696E0090B7F346F8B2BF847CD4D05740A54FB73AB42C5D0190BF4E0795F2289C6489527EE33A5ED014E401361F29A84FC1708EA0FCE74D66FA2A0EE6D3CBE636585ADB000000000000000000000000000000000000000000000000000000000000001C0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000003F12240A2060ACC88D982DE2F0B60C7EC7B084B358EB33EFBD3B1F7CB78A07692DAAE5429F10012A0C08AC92A6F50510A1CFCBB801320962616E64636861696E000000000000000000000000000000000000000000000000000000000000000660000000000000000000000000000000000000000000000000000000000000023400000000000000000000000000000000000000000000000000000000000000A000000000000000000000000000000000000000000000000000000000000001C00000000000000000000000000000000000000000000000000000000000000231000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000000A0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000E00000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000057465737432000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001E303330303030303034323534343336343030303030303030303030303030000000000000000000000000000000000000000000000000000000000000000000E000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000005EA98920000000000000000000000000000000000000000000000000000000005EA9892600000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000574657374320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010653661313063303030303030303030300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000231F281D7270823933196D3AE4B0C418E92034944CA4E5972BA3A16D5260DC962500000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000231D1814868AB070BE64030D05681EBBAA8394251D3FD3A677AA839233CA6EC1C9D000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000023148EAD2DE2ED08B9E45637904A213B3A92BB90C5F70D89E3EBEE8A369DA6C25AB0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000090000000000000000000000000000000000000000000000000000000000000231709E1C73511B24EFDD9B8D3CD717A5210BA20E2411A8529E8B642C54FB002DC400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000002336A7D1D56C342E6C24F69FE1CEEAE5D6F8BBDE2AC9A101F40FEBBA2CDFEB69C4A",
      );
      (await this.bridge.oracleStates(564))
        .toString()
        .should.eq(
          "0xa198fcfaebf1a6f499b330699b61c2557e8ccaeecde3aedd50192aaf87245e16",
        );
      const req = await this.receiver.latestReq();
      req[0].toString().should.eq("test2");
      req[1].toString().should.eq("1");
      req[2].toString().should.eq("030000004254436400000000000000");
      req[3].toString().should.eq("4");
      req[4].toString().should.eq("4");
      const res = await this.receiver.latestRes();
      res[0].toString().should.eq("test2");
      res[1].toString().should.eq("2");
      res[2].toString().should.eq("4");
      res[3].toString().should.eq("1588168992");
      res[4].toString().should.eq("1588168998");
      res[5].toString().should.eq("1");
      res[6].toString().should.eq("e6a10c0000000000");
    });

    it("should revert invalid relay and verify", async () => {
      await expectRevert(
        this.receiver.relayAndSafe(
          "0x
        ),
        "RELAY_ORACLE_STATE_FAILED.",
      );

      await expectRevert(
        this.receiver.relayAndSafe(
          "0x0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000058000000000000000000000000000000000000000000000000000000000000005200000000000000000000000000000000000000000000000000000000000000234E4AFD853694C8D904E7509C4E388D054D7FECA188CC2AA5F391CE2DE0C1DF753CE9D9F07EEB72C23C2F1DD0D8A19DE627686089917A7E5E8E22FF604DBD6E94BA198FCFAEBF1A6F499B330699B61C2557E8CCAEECDE3AEDD50192AAF87245E166D5B21D67B07D553861AD2BCA87CAE74491965249C30D248902F35AD90B9511C0AB8335CB1AD62163B743379D7292B32401F658713424DDADD38C3232F0224AF32FA694879095840619F5E49380612BD296FF7E950EAFB66FF654D99CA70869E49E1A01E4A705DAFCAD7013CB6A86D2D5505ED76D8F1665CFBBE279FFE000638FFD6B03A759B769DCAD0D02F9DE45A9CC546F947573C108414D456F1A7116059004209A161040AB1778E2F2C00EE482F205B28EFBA439FCB04EA283F619478D96E340B9CFFB37A989CA544E6BB780A2C78901D3FB33738768511A30617AFA01D0EFE3E12F46363C7779140D4CE659925DB52F19053E114D7CC4EFD666B37F79F00000000000000000000000000000000000000000000000000000000000001C0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000106E080211340200000000000022480A200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000002200E103975CA4DFB90BB0E5A5C091767945978E3EBAB28735A83E8DAD09CA5F6913CA0A40EA5112DCD8A2E4B4E7871F095CB243BD91619090D01494396EEB7A611000000000000000000000000000000000000000000000000000000000000001B0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000003F12240A2060ACC88D982DE2F0B60C7EC7B084B358EB33EFBD3B1F7CB78A07692DAAE5429F10012A0C08AC92A6F50510CCF58EB801320962616E64636861696E00CCC447AF4AB179B0CAF4F25BD5DDC5AC59E9F9D9F4BAA939CCB54CC8FBA643E674A2DA90D06869302F7790F36B7559C84A7702F35E7DE0096991756C42CC65B7000000000000000000000000000000000000000000000000000000000000001B0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000003F12240A2060ACC88D982DE2F0B60C7EC7B084B358EB33EFBD3B1F7CB78A07692DAAE5429F10012A0C08AC92A6F50510EFE7E1B801320962616E64636861696E0090B7F346F8B2BF847CD4D05740A54FB73AB42C5D0190BF4E0795F2289C6489527EE33A5ED014E401361F29A84FC1708EA0FCE74D66FA2A0EE6D3CBE636585ADB000000000000000000000000000000000000000000000000000000000000001C0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000003F12240A2060ACC88D982DE2F0B60C7EC7B084B358EB33EFBD3B1F7CB78A07692DAAE5429F10012A0C08AC92A6F50510A1CFCBB801320962616E64636861696E000000000000000000000000000000000000000000000000000000000000000660000000000000000000000000000000000000000000000000000000000000023400000000000000000000000000000000000000000000000000000000000000A000000000000000000000000000000000000000000000000000000000000001C00000000000000000000000000000000000000000000000000000000000000231000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000000A0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000E00000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000057465737432000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001E303330303030303034323534343336343030303030303030303030303030000000000000000000000000000000000000000000000000000000000000000000E000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000005EA98920000000000000000000000000000000000000000000000000000000005EA9892600000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000574657374320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010653661313063303030303030303030300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000231F281D7270823933196D3AE4B0C418E92034944CA4E5972BA3A16D5260DC962500000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000231D1814868AB070BE64030D05681EBBAA8394251D3FD3A677AA839233CA6EC1C9D000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000023148EAD2DE2ED08B9E45637904A213B3A92BB90C5F70D89E3EBEE8A369DA6C25AB0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000090000000000000000000000000000000000000000000000000000000000000231709E1C73511B24EFDD9B8D3CD717A5210BA20E2411A8529E8B642C54FB002DC400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000002336A7D1D56C342E6C24F69FE1CEEAE5D6F8BBDE2AC9A101F40FEBBA2CDFEB69B4A",
        ),
        "VERIFY_ORACLE_DATA_FAILED.",
      );
    });
  });

  context("Update provider powers", () => {
    beforeEach(async () => {
      this.bridge = await Bridge.new(
        [
          ["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", 100],
          ["0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE", 100],
          ["0xaAA22E077492CbaD414098EBD98AA8dc1C7AE8D9", 100],
          ["0xB956589b6fC5523eeD0d9eEcfF06262Ce84ff260", 100],
        ],
        { from: owner },
      );
    });

    it("should revert if update validator power by non-onwer", async () => {
      await expectRevert(
        this.bridge.updateValidatorPowers(
          [["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", 150]],
          {
            from: alice,
          },
        ),
        "Ownable: caller is not the owner.",
      );
    });

    it("should update a validator power", async () => {
      await this.bridge.updateValidatorPowers(
        [["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", 150]],
        { from: owner },
      );

      (
        await this.bridge.validatorPowers(
          "0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5",
        )
      )
        .toString()
        .should.eq("150");

      (await this.bridge.totalValidatorPower()).toString().should.eq("450");
    });

    it("should update validator powers", async () => {
      await this.bridge.updateValidatorPowers(
        [
          ["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", 150],
          ["0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE", 0],
          ["0x85109F11A7E1385ee826FbF5dA97bB97dba0D76f", 200],
        ],
        { from: owner },
      );

      (
        await this.bridge.validatorPowers(
          "0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5",
        )
      )
        .toString()
        .should.eq("150");

      (
        await this.bridge.validatorPowers(
          "0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE",
        )
      )
        .toString()
        .should.eq("0");

      (
        await this.bridge.validatorPowers(
          "0x85109F11A7E1385ee826FbF5dA97bB97dba0D76f",
        )
      )
        .toString()
        .should.eq("200");

      (await this.bridge.totalValidatorPower()).toString().should.eq("550");
    });
  });
});
